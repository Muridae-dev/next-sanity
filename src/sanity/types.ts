/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Photo = {
  _id: string;
  _type: "photo";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  year?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "yearOption";
  };
  photographer?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "photographerOption";
  };
};

export type PhotographerOption = {
  _id: string;
  _type: "photographerOption";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
};

export type YearOption = {
  _id: string;
  _type: "yearOption";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  year?: number;
};

export type Event = {
  _id: string;
  _type: "event";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: LocaleString;
  slug?: Slug;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  eventDate?: string;
  shortDescription?: BlockContent;
  body?: BlockContent;
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
};

export type BlockContent = {
  _type: "blockContent";
  en?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  no?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type LocaleString = {
  _type: "localeString";
  en?: string;
  no?: string;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = Photo | PhotographerOption | YearOption | Event | Category | BlockContent | LocaleString | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/queries.ts
// Variable: EVENTS_QUERY
// Query: *[_type == "event" && defined(slug.current)]|order(eventDate desc)[0...12]{  _id,  "title": select($locale == "en" => title.en, $locale == "no" => title.no),  slug,  mainImage,  eventDate,  "shortDescription": select($locale == "en" => shortDescription.en, $locale == "no" => shortDescription.no),}
export type EVENTS_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  eventDate: string | null;
  shortDescription: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
}>;
// Variable: EVENTS_QUERY_ALL
// Query: *[_type == "event" && defined(slug.current)]|order(eventDate desc){  _id,  "title": select($locale == "en" => title.en, $locale == "no" => title.no),  slug,  mainImage,  eventDate,  "shortDescription": select($locale == "en" => shortDescription.en, $locale == "no" => shortDescription.no),  "year": array::join(string::split(eventDate, "")[0...4], "")}
export type EVENTS_QUERY_ALLResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  eventDate: string | null;
  shortDescription: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  year: string | null;
}>;
// Variable: EVENTS_SLUGS_QUERY
// Query: *[_type == "event" && defined(slug.current)]{   "slug": slug.current}
export type EVENTS_SLUGS_QUERYResult = Array<{
  slug: string | null;
}>;
// Variable: EVENT_QUERY
// Query: *[_type == "event" && slug.current == $slug][0]{  _id,  "title": select($locale == "en" => title.en, $locale == "no" => title.no),  slug,  mainImage,  eventDate,  "body": select($locale == "en" => body.en, $locale == "no" => body.no),}
export type EVENT_QUERYResult = {
  _id: string;
  title: string | null;
  slug: Slug | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  eventDate: string | null;
  body: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
} | null;
// Variable: PHOTO_QUERY
// Query: *[_type == "photo"][0...6]{  _id,  title,  image,  year->{    year  },  photographer->{    name  }}
export type PHOTO_QUERYResult = Array<{
  _id: string;
  title: string | null;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  year: {
    year: number | null;
  } | null;
  photographer: {
    name: string | null;
  } | null;
}>;
// Variable: PHOTO_QUERY_ALL
// Query: *[_type == "photo"]{  _id,  title,  image,  year->{    year  },  photographer->{    name  }}
export type PHOTO_QUERY_ALLResult = Array<{
  _id: string;
  title: string | null;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  year: {
    year: number | null;
  } | null;
  photographer: {
    name: string | null;
  } | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"event\" && defined(slug.current)]|order(eventDate desc)[0...12]{\n  _id,\n  \"title\": select($locale == \"en\" => title.en, $locale == \"no\" => title.no),\n  slug,\n  mainImage,\n  eventDate,\n  \"shortDescription\": select($locale == \"en\" => shortDescription.en, $locale == \"no\" => shortDescription.no),\n}": EVENTS_QUERYResult;
    "*[_type == \"event\" && defined(slug.current)]|order(eventDate desc){\n  _id,\n  \"title\": select($locale == \"en\" => title.en, $locale == \"no\" => title.no),\n  slug,\n  mainImage,\n  eventDate,\n  \"shortDescription\": select($locale == \"en\" => shortDescription.en, $locale == \"no\" => shortDescription.no),\n  \"year\": array::join(string::split(eventDate, \"\")[0...4], \"\")\n\n}": EVENTS_QUERY_ALLResult;
    "*[_type == \"event\" && defined(slug.current)]{ \n  \"slug\": slug.current\n}": EVENTS_SLUGS_QUERYResult;
    "*[_type == \"event\" && slug.current == $slug][0]{\n  _id,\n  \"title\": select($locale == \"en\" => title.en, $locale == \"no\" => title.no),\n  slug,\n  mainImage,\n  eventDate,\n  \"body\": select($locale == \"en\" => body.en, $locale == \"no\" => body.no),\n\n}": EVENT_QUERYResult;
    "*[_type == \"photo\"][0...6]{\n  _id,\n  title,\n  image,\n  year->{\n    year\n  },\n  photographer->{\n    name\n  }\n}": PHOTO_QUERYResult;
    "*[_type == \"photo\"]{\n  _id,\n  title,\n  image,\n  year->{\n    year\n  },\n  photographer->{\n    name\n  }\n}": PHOTO_QUERY_ALLResult;
  }
}
